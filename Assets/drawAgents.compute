// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel drawAgents

#pragma kernel darken




struct Agent {
	float2 position;
	float angle;
	float4 color;
};


RWTexture2D<float4> Result;
RWStructuredBuffer<Agent> agents;
float deltaTime;
float speed = 1;
int width;
int height;
float time;
int numAgents;
// followON = 1, it follows, followON = 0, it dosent follow 
int followON;
// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
float hash(uint state){
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state){
    return state / 4294967295.0;
}
float SumBox(float2 position, float4 color){

	//find box borders
	int maxX = position.x+1;	
	int minX = position.x-1;	
	int maxY =  position.y+1;	
	int minY =  position.y-1;	
	float sum = 0;
	//color = color * 2 -1;

	for(int x = minX; x < maxX; x++ ){
		for(int y = minY; y < maxY; y++ ){
			//Result[int2(x,y)] = float4(1,1,1,0);
			sum += dot(color, Result[int2(x,y)]);
		}
	}
	return sum;
}



[numthreads(512,1,1)]
void drawAgents (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= (uint)numAgents) {
		return;
	}

	//setup
    Agent agent = agents[id.x];
    float2 position = agent.position;
	float4 color = agent.color; 

	//get the new position	
    float angle = agent.angle;
	float cosangle = cos(angle);
	float sinangle = sin(angle);
	float multi = 5;
    float2 newPos = float2(position.x + cosangle * deltaTime, position.y + sinangle *deltaTime) ;
	float2 sensePos = float2(position.x + cosangle  * multi, position.y + sinangle * multi) ;
	float2 senseLeft = float2(position.x + cos(angle -1)  * multi, position.y + sin(angle -1) * multi) ;
	float2 senseRight = float2(position.x + cos(angle +1)  * multi, position.y + sin(angle +1) * multi) ;

	//add the value of the boxes to the front, left, and right of you
	float sumfront = SumBox( sensePos, color);
	float sumleft = SumBox(senseLeft, color);
	float sumright = SumBox(senseRight, color);
	sumfront = max(0, sumfront);
	sumleft = max(0, sumleft);
	sumright = max(0, sumright);
	float tilt = sumright - sumleft;
	float aSum = tilt + sumfront;

	//then change the angle depending on what those boxes had in them 
	if(aSum != 0){
		tilt = tilt / aSum;
	}
	tilt = min(max(tilt , -1), 1 );
	agents[id.x].angle = angle + (tilt * deltaTime) * followON;

	//check if we are in bounds
	if (newPos.x < 0 || newPos.x >= width  || newPos.y < 0 || newPos.y >= height ) {  
		float AngleMax = 2 * 3.1415;
		newPos.x = min(width,max(0, newPos.x));
		newPos.y = min(height,max(0, newPos.y));
		uint random = hash(position.y * width + position.x + hash((id.x + time) * 100000));
		random = hash(random);
		random = hash(random);
		float randomAngle = scaleToRange01(random) * AngleMax;

		
		
		agents[id.x].angle = randomAngle;
	}
	else {
		agents[id.x].position = newPos;
		Result[int2(newPos)] = agents[id.x].color;
	}

	
	
}

[numthreads(32,32,1)]
void darken (uint3 id : SV_DispatchThreadID){

	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}
	// 3x3 blur

	float4 sum = 0;
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(width, max(0, id.x + offsetX));
			int sampleY = min(height, max(0, id.y + offsetY));
			sum += Result[int2(sampleX,sampleY)];
		}
	}

	float4 blurredCol = sum /9;
	float4 Pixlecolor = Result[id.xy];
	float diffuseWeight = .1;
	blurredCol = Pixlecolor * (1 - diffuseWeight) + blurredCol * (diffuseWeight);
	Result[id.xy] = max(0, blurredCol - 0.1f    * deltaTime);
    //Result[id.xy] = max(0, Pixlecolor - 0.1f    * deltaTime);
	//Result[id.xy] = max(0, Pixlecolor - 0.1f * deltaTime + (sum * .1 - 0.1f * deltaTime) );
    //Result[id.xy] = max(0, (Pixlecolor + (sum * deltaTime)) - 0.1f * deltaTime);
}


